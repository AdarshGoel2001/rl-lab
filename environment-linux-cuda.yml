name: rl-lab
channels:
  - pytorch
  - nvidia
  - conda-forge
  - defaults

dependencies:
  # Core Python
  - python=3.10

  # Core ML/Scientific Computing with CUDA support
  - pytorch>=2.0.0
  - pytorch-cuda=11.8  # Adjust version based on your CUDA installation
  - torchvision
  - torchaudio
  - numpy>=1.24.0
  - scipy>=1.11.0
  - scikit-learn>=1.3.0

  # CUDA toolkit (ensure compatibility with pytorch-cuda version)
  - cudatoolkit=11.8

  # Data handling and visualization
  - pandas>=2.0.0
  - matplotlib>=3.7.0
  - seaborn>=0.12.0
  - pillow>=10.0.0
  - imageio>=2.31.0

  # Configuration and utilities
  - pyyaml>=6.0
  - tqdm>=4.65.0

  # Development tools
  - pytest>=7.3.0
  - black>=23.3.0
  - flake8>=6.0.0
  - mypy>=1.4.0
  - jupyterlab

  # System utilities
  - git

  # Pip for packages not available in conda
  - pip

  # Packages that must be installed via pip
  - pip:
    # RL Environments
    - gymnasium>=0.28.0
    - dm-control>=1.0.14
    
    # Logging and monitoring
    - tensorboard>=2.13.0
    - wandb>=0.15.0
    
    # Configuration management  
    - hydra-core>=1.3.0
    
    # Hyperparameter optimization
    - optuna>=3.2.0
    
    # Additional utilities
    - opencv-python>=4.8.0
    
    # Optional GPU-accelerated packages
    - cupy-cuda11x>=12.0.0  # GPU-accelerated NumPy
    
    # Optional environment dependencies
    # - atari-py>=0.2.9              # For Atari environments
    # - mujoco>=2.3.0                # For MuJoCo environments  
    # - box2d-py>=2.3.5              # For Box2D environments
    # - pybullet>=3.2.5              # For PyBullet environments

# Notes for Linux with CUDA:
# 1. Ensure NVIDIA drivers are installed and compatible
# 2. Adjust pytorch-cuda and cudatoolkit versions to match your CUDA installation
# 3. Check CUDA version with: nvidia-smi
# 4. For CUDA 12.x, use pytorch-cuda=12.1 and adjust cudatoolkit accordingly
# 5. Some RL environments may require additional system packages (apt install ...)