<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="2" time="3.265" timestamp="2025-09-05T05:07:43.164876+05:30" hostname="Adarshs-MacBook-Pro.local"><testcase classname="tests.test_algorithm_correctness" name="test_random_agent_discrete_action_shape" time="0.001" /><testcase classname="tests.test_algorithm_correctness" name="test_random_agent_continuous_action_shape" time="0.001"><failure message="TypeError: must be real number, not NoneType">def test_random_agent_continuous_action_shape():
        obs = torch.randn(1, 4)
        action_space = SpaceSpec(shape=(3,), dtype=np.float32, discrete=False)
        obs_space = SpaceSpec(shape=(4,), dtype=np.float32)
        agent = RandomAgent({"action_space": action_space, "observation_space": obs_space, "device": "cpu"})
&gt;       a = agent.act(obs)
            ^^^^^^^^^^^^^^

tests/test_algorithm_correctness.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;src.algorithms.random.RandomAgent object at 0x115da60d0&gt;
observation = tensor([[0.3416, 0.1577, 0.8038, 1.2545]]), deterministic = False

    def act(self, observation: torch.Tensor, deterministic: bool = False) -&gt; torch.Tensor:
        """
        Select a random action.
    
        Args:
            observation: Current observation (ignored for random agent)
            deterministic: Whether to act deterministically (ignored)
    
        Returns:
            Random action tensor
        """
        batch_size = observation.shape[0] if observation.dim() &gt; 1 else 1
    
        if self.action_space.discrete:
            # Discrete action space - sample random integers
            actions = torch.randint(
                0, self.action_space.n,
                size=(batch_size,),
                device=self.device
            )
        else:
            # Continuous action space - sample from uniform distribution
            action_shape = (batch_size, self.action_space.shape[0])
    
            # Sample from action bounds if available
            if hasattr(self.action_space, 'low') and hasattr(self.action_space, 'high'):
&gt;               low = torch.tensor(self.action_space.low, device=self.device, dtype=torch.float32)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               TypeError: must be real number, not NoneType

src/algorithms/random.py:73: TypeError</failure></testcase></testsuite></testsuites>