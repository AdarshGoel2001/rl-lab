name: rl-lab
channels:
  - pytorch
  - nvidia         # For CUDA packages (ignored on non-CUDA systems)
  - conda-forge
  - defaults

dependencies:
  # Core Python
  - python=3.10

  # PyTorch (conda will auto-select CUDA/CPU based on system)
  - pytorch>=2.0.0
  - torchvision

  # Core Scientific Computing
  - numpy>=1.24.0
  - scipy>=1.11.0
  - pandas>=2.0.0

  # Development Tools
  - pytest>=7.3.0
  - black>=23.3.0
  - git

  # System utilities
  - pip

  # Packages installed via pip (not available in conda or better from pip)
  - pip:
    # Core RL Framework
    - gymnasium>=0.28.0
    - pyyaml>=6.0
    - tqdm>=4.65.0
    - hydra-core>=1.3.0
    
    # Monitoring
    - tensorboard>=2.13.0
    
    # Optional: Uncomment as needed
    # - wandb>=0.15.0           # Experiment tracking
    # - optuna>=3.2.0           # Hyperparameter tuning
    # - dm-control>=1.0.14      # DeepMind Control Suite
    # - opencv-python>=4.8.0    # Computer vision
    # - pillow>=10.0.0          # Image processing
    # - imageio>=2.31.0         # Image I/O
    # - seaborn>=0.12.0         # Statistical plotting
    # - scikit-learn>=1.3.0     # ML utilities

# Platform-specific notes:
# 
# macOS (Intel/Apple Silicon):
# - PyTorch will use MPS acceleration on Apple Silicon automatically
# - No CUDA dependencies needed
# 
# Linux with NVIDIA GPU:
# - Conda will automatically install CUDA-enabled PyTorch
# - Requires NVIDIA drivers to be pre-installed
# 
# Linux/Windows CPU-only:
# - Will install CPU-only PyTorch automatically
# - Smaller download, no GPU dependencies
#
# Installation:
# 1. Create: conda env create -f environment.yml
# 2. Update: conda env update -f environment.yml  
# 3. Activate: conda activate rl-lab
#
# For more control, use the setup_env.sh script which can detect
# your platform and optimize the installation accordingly.